#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication6.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Database1")]
	public partial class MedicineInstanceDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertMedicine(Medicine instance);
    partial void UpdateMedicine(Medicine instance);
    partial void DeleteMedicine(Medicine instance);
    #endregion
		
		public MedicineInstanceDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["Database1ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MedicineInstanceDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MedicineInstanceDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MedicineInstanceDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MedicineInstanceDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Medicine> Medicines
		{
			get
			{
				return this.GetTable<Medicine>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Medicine")]
	public partial class Medicine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _M_Name;
		
		private string _M_Price;
		
		private string _M_Qty;
		
		private string _Medicine_Type;
		
		private string _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnM_NameChanging(string value);
    partial void OnM_NameChanged();
    partial void OnM_PriceChanging(string value);
    partial void OnM_PriceChanged();
    partial void OnM_QtyChanging(string value);
    partial void OnM_QtyChanged();
    partial void OnMedicine_TypeChanging(string value);
    partial void OnMedicine_TypeChanged();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    #endregion
		
		public Medicine()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_M_Name", DbType="NChar(40)")]
		public string M_Name
		{
			get
			{
				return this._M_Name;
			}
			set
			{
				if ((this._M_Name != value))
				{
					this.OnM_NameChanging(value);
					this.SendPropertyChanging();
					this._M_Name = value;
					this.SendPropertyChanged("M_Name");
					this.OnM_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_M_Price", DbType="NChar(40)")]
		public string M_Price
		{
			get
			{
				return this._M_Price;
			}
			set
			{
				if ((this._M_Price != value))
				{
					this.OnM_PriceChanging(value);
					this.SendPropertyChanging();
					this._M_Price = value;
					this.SendPropertyChanged("M_Price");
					this.OnM_PriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_M_Qty", DbType="NChar(40)")]
		public string M_Qty
		{
			get
			{
				return this._M_Qty;
			}
			set
			{
				if ((this._M_Qty != value))
				{
					this.OnM_QtyChanging(value);
					this.SendPropertyChanging();
					this._M_Qty = value;
					this.SendPropertyChanged("M_Qty");
					this.OnM_QtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Medicine_Type", DbType="NChar(40)")]
		public string Medicine_Type
		{
			get
			{
				return this._Medicine_Type;
			}
			set
			{
				if ((this._Medicine_Type != value))
				{
					this.OnMedicine_TypeChanging(value);
					this.SendPropertyChanging();
					this._Medicine_Type = value;
					this.SendPropertyChanged("Medicine_Type");
					this.OnMedicine_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company", DbType="NChar(40)")]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
